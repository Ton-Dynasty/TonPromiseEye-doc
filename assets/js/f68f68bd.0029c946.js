"use strict";(self.webpackChunkton_promise_eye_doc=self.webpackChunkton_promise_eye_doc||[]).push([[2246],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(a),c=r,k=p["".concat(o,".").concat(c)]||p[c]||m[c]||i;return a?n.createElement(k,l(l({ref:t},u),{},{components:a})):n.createElement(k,l({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},9656:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={},l="ChildRouter",s={unversionedId:"Architecture/ChildRouter",id:"Architecture/ChildRouter",title:"ChildRouter",description:"The ChildRouter contract is a crucial component of the Eventon protocol, responsible for handling various functionalities related to protocol registration, stake management, and interaction with messenger contracts. This documentation provides an in-depth overview of the ChildRouter contract, including its key features, functions, and usage examples.",source:"@site/docs/Architecture/ChildRouter.md",sourceDirName:"Architecture",slug:"/Architecture/ChildRouter",permalink:"/eventon-doc/docs/Architecture/ChildRouter",draft:!1,editUrl:"https://github.com/Ton-Dynasty/eventon-doc/tree/main/docs/Architecture/ChildRouter.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Universal Router",permalink:"/eventon-doc/docs/Architecture/UniversalRouter"},next:{title:"Messenger",permalink:"/eventon-doc/docs/Architecture/Messenger"}},o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Contract Details",id:"contract-details",level:2},{value:"State Variables",id:"state-variables",level:3},{value:"Constructor",id:"constructor",level:3},{value:"Message Types",id:"message-types",level:2},{value:"EventTrigger",id:"eventtrigger",level:3},{value:"BuildMessenger",id:"buildmessenger",level:3},{value:"BuildChildRouter",id:"buildchildrouter",level:3},{value:"CreateBody",id:"createbody",level:3},{value:"SubscribeBody",id:"subscribebody",level:3},{value:"ProtcolRegister",id:"protcolregister",level:3},{value:"ProtcolRegisterSuccess",id:"protcolregistersuccess",level:3},{value:"CreateMsgSubscriber",id:"createmsgsubscriber",level:3},{value:"CreateMsgSubscriberSuccess",id:"createmsgsubscribersuccess",level:3},{value:"CreateUdcSuccess",id:"createudcsuccess",level:3},{value:"DeleteSubscriber",id:"deletesubscriber",level:3},{value:"DestroyMessenger",id:"destroymessenger",level:3},{value:"AddMessenger",id:"addmessenger",level:3},{value:"AddStakeFor",id:"addstakefor",level:3},{value:"RemoveStake",id:"removestake",level:3},{value:"CollectFee",id:"collectfee",level:3},{value:"BuildUDC",id:"buildudc",level:3},{value:"ExtMessage",id:"extmessage",level:3},{value:"OffchainEventSignal",id:"offchaineventsignal",level:3},{value:"Staked",id:"staked",level:3},{value:"Withdrawn",id:"withdrawn",level:3},{value:"ClaimReward",id:"claimreward",level:3},{value:"State Variables and Functions",id:"state-variables-and-functions",level:2}],u={toc:d},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"childrouter"},"ChildRouter"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter")," contract is a crucial component of the Eventon protocol, responsible for handling various functionalities related to protocol registration, stake management, and interaction with messenger contracts. This documentation provides an in-depth overview of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter")," contract, including its key features, functions, and usage examples."),(0,r.kt)("p",null,"As the intermediary between the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Architecture/UniversalRouter"},(0,r.kt)("strong",{parentName:"a"},"Universal Router"))," and the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Architecture/Messenger"},(0,r.kt)("strong",{parentName:"a"},"Messenger")),", the Child Router has the following functionalities:"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter")," contract serves as an intermediary between the Universal Router and Messenger contracts in the Eventon protocol. It offers a range of functionalities for protocols and users, allowing them to manage event subscriptions, stake TON coins, and interact with messenger contracts. Here are some key aspects of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter")," contract:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Protocol Registration:")," Protocols can register event signals with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter"),", enabling users to subscribe to specific events.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Stake Management:")," Users and protocols can stake TON coins with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter")," to ensure that event signals are efficiently delivered to subscribers.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Messenger Interaction:")," The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter")," facilitates the creation and interaction with messenger contracts, which distribute event signals to subscribers."))),(0,r.kt)("h2",{id:"contract-details"},"Contract Details"),(0,r.kt)("h3",{id:"state-variables"},"State Variables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"owner"),": Address of the Universal Router."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceAddress"),": Address of the protocol associated with this ",(0,r.kt)("inlineCode",{parentName:"li"},"ChildRouter"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"messengerId"),": Unique identifier for the messenger."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"minimumStake"),": Minimum required stake amount for users and protocols."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stakes"),": Mapping of user or protocol addresses to their respective stake amounts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stakeShares"),": Mapping of user or protocol addresses to their total stake shares."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"totalStakeAmount"),": Total stake amount across all users and protocols."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maxUserStakeAmount"),": Maximum total stake amount allowed for users."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"totalShares"),": Total shares representing stake ownership."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"messengerState"),": Mapping of messenger IDs to their current state."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventId"),": The event ID associated with this ",(0,r.kt)("inlineCode",{parentName:"li"},"ChildRouter")," (default: -1).")),(0,r.kt)("h3",{id:"constructor"},"Constructor"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter")," contract is initialized with the following parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"owner"),": The address of the Universal Router."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceAddress"),": The address of the protocol."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"minimumStake"),": The minimum required stake amount.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"init(owner: Address, sourceAddress: Address, minimumStake: Int) {\n    // Initialize contract state variables\n}\n")),(0,r.kt)("h2",{id:"message-types"},"Message Types"),(0,r.kt)("h3",{id:"eventtrigger"},"EventTrigger"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Sending an event trigger to notify subscribers of an event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value: Int"),": The value associated with the event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address: Address"),": The address associated with the event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info: EventSignal"),": Additional information about the event.")))),(0,r.kt)("h3",{id:"buildmessenger"},"BuildMessenger"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Building a messenger contract for event distribution."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceAddress: Address"),": The protocol's address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventId: Int"),": The event ID to subscribe to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maxUserStakeAmount: Int as coins"),": Maximum stake per user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subscribeFeePerTick: Int as coins"),": Subscription fee per tick."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"template: Cell"),": Callback contract for subscribers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceName: String"),": Protocol's name.")))),(0,r.kt)("h3",{id:"buildchildrouter"},"BuildChildRouter"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Building a Child Router contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceAddress: Address"),": The protocol's address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventId: Int"),": The event ID to subscribe to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maxUserStakeAmount: Int as coins"),": Maximum stake per user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subscribeFeePerTick: Int as coins"),": Subscription fee per tick."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"template: Cell"),": Callback contract for subscribers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceName: String"),": Protocol's name.")))),(0,r.kt)("h3",{id:"createbody"},"CreateBody"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Creating a callback contract for a user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"walletAddress: Address"),": Owner address of the callback contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deadline: Int"),": Deadline for the message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventId: Int"),": The event ID to subscribe to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parameter: Cell"),": Callback contract parameter.")))),(0,r.kt)("h3",{id:"subscribebody"},"SubscribeBody"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Subscribing to an event using a callback contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"walletAddress: Address"),": Owner address of the callback contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deadline: Int"),": Deadline for the message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventId: Int"),": The event ID to subscribe to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callbackAddress: Address"),": Callback contract address written by the user.")))),(0,r.kt)("h3",{id:"protcolregister"},"ProtcolRegister"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Registering a protocol for event distribution."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceAddress: Address"),": Protocol's address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"template: Cell"),": Callback contract for subscribers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maxUserStakeAmount: Int as coins"),": Maximum stake per user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subscribeFeePerTick: Int as coins"),": Subscription fee per tick."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceName: String"),": Protocol's name.")))),(0,r.kt)("h3",{id:"protcolregistersuccess"},"ProtcolRegisterSuccess"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Notifying a successful protocol registration."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceAddress: Address"),": Protocol's address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventId: Int"),": The event ID to subscribe to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maxUserStakeAmount: Int as coins"),": Maximum stake per user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subscribeFeePerTick: Int as coins"),": Subscription fee per tick."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"template: Cell"),": Callback contract for subscribers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceName: String"),": Protocol's name.")))),(0,r.kt)("h3",{id:"createmsgsubscriber"},"CreateMsgSubscriber"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Creating a message subscriber."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"walletAddress: Address"),": Owner address of the callback contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callbackAddress: Address"),": UDC address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventId: Int"),": The event ID to subscribe to.")))),(0,r.kt)("h3",{id:"createmsgsubscribersuccess"},"CreateMsgSubscriberSuccess"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Notifying a successful message subscriber creation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callbackAddress: Address"),": Owner address of the callback contract.")))),(0,r.kt)("h3",{id:"createudcsuccess"},"CreateUdcSuccess"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Notifying a successful User Default Callback (UDC) contract creation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"walletAddress: Address"),": Owner address of the callback contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callbackAddress: Address"),": UDC address.")))),(0,r.kt)("h3",{id:"deletesubscriber"},"DeleteSubscriber"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Deleting a subscriber from a messenger contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"walletAddress: Address"),": Owner address of the callback contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callbackAddress: Address"),": UDC address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventId: Int"),": The event ID to subscribe to.")))),(0,r.kt)("h3",{id:"destroymessenger"},"DestroyMessenger"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Destroying a messenger contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"messengerId: Int"),": Messenger ID to destroy.")))),(0,r.kt)("h3",{id:"addmessenger"},"AddMessenger"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Adding a messenger contract for a protocol."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"protocolAddress: Address"),": Protocol's address.")))),(0,r.kt)("h3",{id:"addstakefor"},"AddStakeFor"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Adding stake for a beneficiary."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"beneficiary: Address"),": Beneficiary address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount: Int as coins"),": Amount of stake to add.")))),(0,r.kt)("h3",{id:"removestake"},"RemoveStake"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Removing stake."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"receiver: Address"),": Receiver address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount: Int as coins"),": Amount of stake to remove.")))),(0,r.kt)("h3",{id:"collectfee"},"CollectFee"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Collecting fees from subscribers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"`messengerId: Int")))),(0,r.kt)("p",null,"`: Messenger ID."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fee: Int as coins"),": Amount of fee to collect.")),(0,r.kt)("h3",{id:"buildudc"},"BuildUDC"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Building a User Default Callback (UDC) contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"owner: Address"),": Owner address of the UDC.")))),(0,r.kt)("h3",{id:"extmessage"},"ExtMessage"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Sending an extended message with various parameters."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"seqno: Int as uint32"),": Sequence number of the event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"valid_until: Int as uint32"),": Deadline of the message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signature: Slice as bytes64"),": Signature of the message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message_parameters: SendParameters"),": Message payload.")))),(0,r.kt)("h3",{id:"offchaineventsignal"},"OffchainEventSignal"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Sending an off-chain event signal."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventId: Int"),": Protocol-defined event identifier."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload: Cell"),": Optional information for subscribers.")))),(0,r.kt)("h3",{id:"staked"},"Staked"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Notifying a stake action."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount: Int as coins"),": Amount of stake."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"staker: Address"),": Address of the staker."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"beneficiary: Address"),": Beneficiary address.")))),(0,r.kt)("h3",{id:"withdrawn"},"Withdrawn"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Notifying a stake withdrawal."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount: Int as coins"),": Amount of withdrawn stake."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"receiver: Address"),": Receiver address.")))),(0,r.kt)("h3",{id:"claimreward"},"ClaimReward"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Purpose"),": Notifying a reward claim."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fields"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount: Int as coins"),": Amount of claimed reward."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"receiver: Address"),": Receiver address.")))),(0,r.kt)("h2",{id:"state-variables-and-functions"},"State Variables and Functions"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter")," contract includes several state variables and functions that are essential for its operation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"calculateReward(addr: Address): Int"),": Calculates the reward for a specific user or protocol based on their stake and shares.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"messengerAddress(sourceAddress: Address, messengerId: Int): Address"),": Retrieves the address of the messenger contract associated with a specific protocol and messenger ID.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"messengerInit(sourceAddress: Address, messengerId: Int): StateInit"),": Gets the initialization data for a messenger contract.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"udcAddress(owner: Address, parameter: Cell): Address"),": Retrieves the address of a User Default Callback (UDC) contract associated with a specific owner and parameter.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"udcInit(owner: Address, parameter: Cell): StateInit"),": Gets the initialization data for a User Default Callback (UDC) contract.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"messengerId(): Int"),": Gets the current messenger ID associated with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getMessengerState(messengerId: Int): Int?"),": Retrieves the state of a specific messenger based on its ID.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getBalance(): Int"),": Gets the balance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildRouter")," contract."))))}m.isMDXComponent=!0}}]);